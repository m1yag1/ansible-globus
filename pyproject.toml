[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ansible-globus"
version = "1.0.0"
description = "Ansible collection for managing Globus infrastructure"
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.12"
dependencies = [
    "ansible-core>=2.16.0",
    "globus-sdk>=3.0.0",  # Support both v3 and v4
    "requests>=2.31.0",
    "boto3>=1.26.0",
    "packaging>=21.0",  # For SDK version detection
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "types-requests>=2.31.0",

    # Code quality (Ruff replaces black, isort, flake8)
    "ruff>=0.1.0",
    "mypy>=1.0.0",

    # Security
    "bandit>=1.7.0",
    "safety>=2.3.0",

    # Ansible tools
    "ansible-lint>=6.0.0",
    "yamllint>=1.29.0",

    # Development tools
    "pre-commit>=3.0.0",
    "tox>=4.0.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "boto3>=1.26.0",  # Required for S3 token storage in integration tests
]

lint = [
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "ansible-lint>=6.0.0",
    "yamllint>=1.29.0",
]

security = [
    "bandit>=1.7.0",
    "safety>=2.3.0",
]

[project.urls]
Homepage = "https://github.com/your-org/ansible-globus"
Repository = "https://github.com/your-org/ansible-globus"
Documentation = "https://github.com/your-org/ansible-globus/blob/main/README.md"
"Bug Tracker" = "https://github.com/your-org/ansible-globus/issues"

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
# Enable flake8-like rules + others
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "E402"]  # allow assert in tests, allow imports after sys.path manipulation
"plugins/modules/*" = ["E402"]  # module-level imports after docstrings in Ansible modules

[tool.ruff.lint.isort]
known-first-party = ["ansible_collections"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ansible.*",
    "globus_sdk.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=plugins/module_utils",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests requiring live Globus services",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "high_assurance: Tests requiring high-assurance authentication (MFA within 30 min)",
]

[tool.coverage.run]
source = ["plugins/module_utils"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]

[tool.setuptools.packages.find]
where = ["."]
include = ["plugins*"]
exclude = ["infra*", "tests*", "docs*", "examples*", "scripts*"]
