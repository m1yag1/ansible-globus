---
# Example playbook for testing OAuth client creation with globus_auth module
#
# This demonstrates:
# 1. Creating a Globus Auth project
# 2. Creating different types of OAuth clients
# 3. Option 5 credential output (multiple formats with warnings)
#
# Prerequisites:
# - OAuth tokens with manage_projects scope (auth.globus.org)
# - Run: python scripts/setup_oauth_tokens.py to generate tokens with auth scope

- name: Test Globus Auth OAuth Client Creation
  hosts: localhost
  connection: local
  gather_facts: true

  vars:
    # Authentication - use one of these methods:
    # Method 1: Access token (from environment or S3 token storage)
    # auth_method: access_token
    # access_token: "{{ lookup('env', 'GLOBUS_AUTH_TOKEN') }}"

    # Method 2: Client credentials
    # auth_method: client_credentials
    # client_id: "{{ lookup('env', 'GLOBUS_CLIENT_ID') }}"
    # client_secret: "{{ lookup('env', 'GLOBUS_CLIENT_SECRET') }}"

    # Method 3: CLI (default)
    auth_method: cli

  tasks:
    - name: Create test project
      community.globus.globus_auth:
        resource_type: project
        name: "ansible-demo-project-{{ ansible_date_time.epoch }}"
        contact_email: "admin@example.com"
        description: "Demo project for OAuth client testing"
        auth_method: "{{ auth_method }}"
        state: present
      register: project

    - name: Display project info
      debug:
        msg: "Created project {{ project.name }} with ID: {{ project.resource_id }}"

    # Test 1: Confidential Client (Service Account)
    - name: Create confidential client (service account)
      community.globus.globus_auth:
        resource_type: client
        name: "demo-service-account-{{ ansible_date_time.epoch }}"
        project_id: "{{ project.resource_id }}"
        client_type: confidential_client
        redirect_uris:
          - "https://myapp.example.com/callback"
        visibility: private
        auth_method: "{{ auth_method }}"
        state: present
      register: service_account
      no_log: false  # Set to true in production!

    - name: Display service account credentials
      debug:
        msg:
          - "==================== SERVICE ACCOUNT CREDENTIALS ===================="
          - "Client ID: {{ service_account.client_id }}"
          - "Client Secret: {{ service_account.client_secret }}"
          - ""
          - "⚠️  WARNING: {{ service_account.warning }}"
          - ""
          - "Ansible Environment Format:"
          - "{{ service_account.client_credentials.ansible_env }}"
          - ""
          - "Shell Export Format:"
          - "{{ service_account.client_credentials.shell_export }}"
          - "===================================================================="

    # Test 2: Public Installed Client (Thick Client / Desktop App)
    - name: Create public installed client (thick client)
      community.globus.globus_auth:
        resource_type: client
        name: "demo-desktop-app-{{ ansible_date_time.epoch }}"
        project_id: "{{ project.resource_id }}"
        client_type: public_installed_client
        redirect_uris:
          - "https://auth.globus.org/v2/web/auth-code"
        visibility: public
        auth_method: "{{ auth_method }}"
        state: present
      register: desktop_app

    - name: Display desktop app info
      debug:
        msg:
          - "Created desktop app client: {{ desktop_app.client_id }}"
          - "This is a public client (no secret required)"

    # Test 3: Client Identity (for CI/CD automation)
    - name: Create client identity
      community.globus.globus_auth:
        resource_type: client
        name: "demo-ci-cd-{{ ansible_date_time.epoch }}"
        project_id: "{{ project.resource_id }}"
        client_type: client_identity
        auth_method: "{{ auth_method }}"
        state: present
      register: ci_cd_client

    - name: Display CI/CD client credentials
      debug:
        msg:
          - "Created CI/CD client identity: {{ ci_cd_client.client_id }}"
          - "Client Secret: {{ ci_cd_client.client_secret }}"

    # Test 4: Client with file output
    - name: Create client with credential file output
      community.globus.globus_auth:
        resource_type: client
        name: "demo-file-output-{{ ansible_date_time.epoch }}"
        project_id: "{{ project.resource_id }}"
        client_type: confidential_client
        credential_output_file: "/tmp/globus-client-credentials.json"
        auth_method: "{{ auth_method }}"
        state: present
      register: file_output_client

    - name: Display file output info
      debug:
        msg:
          - "Created client with file output"
          - "Credentials saved to: {{ file_output_client.client_credentials.json_file }}"

    - name: Read and display saved credentials
      command: cat /tmp/globus-client-credentials.json
      register: cred_file_content

    - name: Show credential file contents
      debug:
        msg: "{{ cred_file_content.stdout }}"

    # Cleanup Note
    - name: Cleanup instructions
      debug:
        msg:
          - "✅ All OAuth client tests completed successfully!"
          - ""
          - "⚠️  CLEANUP REQUIRED: Manual deletion needed"
          - "Deleting projects and OAuth clients requires high-assurance authentication"
          - "(MFA within 30 minutes) and cannot be done via Ansible."
          - ""
          - "To clean up these test resources:"
          - "1. Go to https://app.globus.org/settings/developers"
          - "2. Select project: {{ project.name }} ({{ project.resource_id }})"
          - "3. Delete the following clients from the 'Apps' tab:"
          - "   - {{ service_account.name }} ({{ service_account.client_id }})"
          - "   - {{ desktop_app.name }} ({{ desktop_app.client_id }})"
          - "   - {{ ci_cd_client.name }} ({{ ci_cd_client.client_id }})"
          - "   - {{ file_output_client.name }} ({{ file_output_client.client_id }})"
          - "4. Delete the project using 'Delete Project' option"
