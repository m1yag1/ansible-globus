name: Release

on:
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: "3.9"

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGES=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            CHANGES=$(git log --pretty=format:"- %s (%h)" --reverse ${LAST_TAG}..HEAD)
          fi

          cat > CHANGELOG.md << EOF
          # Changes in v${{ steps.get_version.outputs.version }}

          $CHANGES

          ## Installation

          \`\`\`bash
          ansible-galaxy collection install community.globus:${{ steps.get_version.outputs.version }}
          \`\`\`

          ## Documentation

          See the [README](https://github.com/your-org/ansible-globus/blob/v${{ steps.get_version.outputs.version }}/README.md) for full documentation.
          EOF

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

  build_and_upload:
    name: Build and Upload Collection
    runs-on: ubuntu-latest
    needs: create_release

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core

      - name: Create galaxy.yml with version
        run: |
          cat > galaxy.yml << EOF
          namespace: community
          name: globus
          version: ${{ needs.create_release.outputs.version }}
          readme: README.md
          authors:
            - "Ansible Globus Module Contributors"
          description: "Ansible collection for managing Globus infrastructure"
          license:
            - "Apache-2.0"
          license_file: LICENSE
          tags:
            - globus
            - data_transfer
            - research
            - hpc
            - automation
          dependencies: {}
          repository: "https://github.com/your-org/ansible-globus"
          documentation: "https://github.com/your-org/ansible-globus/blob/main/README.md"
          homepage: "https://github.com/your-org/ansible-globus"
          issues: "https://github.com/your-org/ansible-globus/issues"
          build_ignore:
            - "*.pyc"
            - "__pycache__"
            - ".git"
            - ".github"
            - "tests/"
            - "*.tar.gz"
          EOF

      - name: Build collection
        run: |
          ansible-galaxy collection build
          ls -la *.tar.gz

      - name: Upload collection to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./community-globus-${{ needs.create_release.outputs.version }}.tar.gz
          asset_name: community-globus-${{ needs.create_release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Publish to Ansible Galaxy
        env:
          ANSIBLE_GALAXY_API_KEY: ${{ secrets.ANSIBLE_GALAXY_API_KEY }}
        run: |
          if [ -n "$ANSIBLE_GALAXY_API_KEY" ]; then
            ansible-galaxy collection publish *.tar.gz --api-key $ANSIBLE_GALAXY_API_KEY
            echo "✅ Published to Ansible Galaxy"
          else
            echo "⚠️ ANSIBLE_GALAXY_API_KEY not set, skipping Galaxy publication"
          fi

  update_documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create_release, build_and_upload]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version in README
        run: |
          sed -i 's/ansible-galaxy collection install community\.globus.*/ansible-galaxy collection install community.globus:${{ needs.create_release.outputs.version }}/' README.md

      - name: Create version badge
        run: |
          curl -s "https://img.shields.io/badge/version-v${{ needs.create_release.outputs.version }}-blue.svg" > version-badge.svg

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update documentation for v${{ needs.create_release.outputs.version }}"
            git push origin main
          fi

  test_installation:
    name: Test Installation
    runs-on: ubuntu-latest
    needs: [create_release, build_and_upload]
    strategy:
      matrix:
        ansible-version: [">=4.0.0", ">=5.0.0", ">=6.0.0"]

    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install "ansible${{ matrix.ansible-version }}"

      - name: Test collection installation from GitHub
        run: |
          # Install from GitHub release
          ansible-galaxy collection install \
            https://github.com/your-org/ansible-globus/releases/download/v${{ needs.create_release.outputs.version }}/community-globus-${{ needs.create_release.outputs.version }}.tar.gz

          # Verify installation
          ansible-galaxy collection list | grep community.globus

      - name: Test basic module import
        run: |
          # Create a simple test playbook
          cat > test-playbook.yml << EOF
          ---
          - name: Test Globus modules import
            hosts: localhost
            connection: local
            gather_facts: false
            tasks:
              - name: Test module syntax
                debug:
                  msg: "Testing Globus collection v${{ needs.create_release.outputs.version }}"
          EOF

          # Test playbook syntax
          ansible-playbook test-playbook.yml --syntax-check

  notify_completion:
    name: Notify Release Completion
    runs-on: ubuntu-latest
    needs: [create_release, build_and_upload, update_documentation, test_installation]
    if: always()

    steps:
      - name: Release Summary
        run: |
          echo "🚀 Release v${{ needs.create_release.outputs.version }} Summary:"
          echo ""
          echo "✅ Release created: ${{ needs.create_release.result }}"
          echo "✅ Collection built and uploaded: ${{ needs.build_and_upload.result }}"
          echo "✅ Documentation updated: ${{ needs.update_documentation.result }}"
          echo "✅ Installation tested: ${{ needs.test_installation.result }}"
          echo ""
          echo "📦 Collection available at:"
          echo "   - GitHub Release: https://github.com/your-org/ansible-globus/releases/tag/v${{ needs.create_release.outputs.version }}"
          echo "   - Ansible Galaxy: https://galaxy.ansible.com/community/globus"
          echo ""
          echo "📚 Documentation: https://github.com/your-org/ansible-globus/blob/main/README.md"

      - name: Check for failures
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "❌ Some release steps failed. Please check the logs and consider creating a patch release."
          exit 1
