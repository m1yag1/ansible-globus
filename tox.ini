[tox]
min_version = 4.0
env_list =
    py312-sdk{3,4}
    lint
    security
    type-check
    docs

[testenv]
package = wheel
wheel_build_env = .pkg
deps =
    pytest>=7.0.0
    pytest-cov>=4.0.0
    pytest-xdist>=3.0.0
    pytest-mock>=3.10.0
    ansible-core>=2.16.0
    packaging>=21.0
    sdk3: globus-sdk>=3.0.0,<4.0.0
    sdk4: globus-sdk>=4.0.0
extras = test
commands =
    pytest {posargs:tests/unit tests/integration}

# Test matrix for SDK versions
[testenv:py312-sdk{3,4}]
description =
    sdk3: Run tests with Globus SDK v3
    sdk4: Run tests with Globus SDK v4
usedevelop = true
deps =
    pytest>=7.0.0
    pytest-cov>=4.0.0
    pytest-xdist>=3.0.0
    pytest-mock>=3.10.0
    ansible-core>=2.16.0
    packaging>=21.0
    requests>=2.31.0
    boto3>=1.26.0
    sdk3: globus-sdk>=3.0.0,<4.0.0
    sdk4: globus-sdk>=4.0.0
setenv =
    PYTHONPATH = {toxinidir}{:}{toxinidir}/tests{:}{toxinidir}/plugins
passenv =
    S3_TOKEN_BUCKET
    S3_TOKEN_KEY
    S3_TOKEN_NAMESPACE
    AWS_REGION
    AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY
    AWS_SESSION_TOKEN
    GLOBUS_CLIENT_ID
    GLOBUS_CLIENT_SECRET
    GLOBUS_ADMIN_IDS
    GLOBUS_SDK_ENVIRONMENT
commands =
    python -c "import globus_sdk; print(f'Testing with Globus SDK {globus_sdk.__version__}')"
    pytest {posargs:tests/unit tests/integration} -v

[testenv:lint]
deps =
    ruff>=0.1.0
    ansible-lint>=6.0.0
    yamllint>=1.29.0
commands =
    ruff check plugins/ tests/
    yamllint docs/examples/ .github/workflows/
    ansible-lint docs/examples/

[testenv:format]
deps =
    ruff>=0.1.0
commands =
    ruff format plugins/ tests/
    ruff check --fix plugins/ tests/

[testenv:security]
deps =
    bandit>=1.7.0
    safety>=2.3.0
commands =
    bandit -r plugins/ -f json -o bandit-report.json
    safety check --json --output safety-report.json

[testenv:type-check]
deps =
    mypy>=1.0.0
    types-requests
commands =
    mypy plugins/module_utils/

[testenv:docs]
deps =
    sphinx>=6.0.0
    sphinx-rtd-theme>=1.2.0
commands =
    python -c "import markdown; markdown.markdown(open('README.md').read())"

[testenv:e2e]
deps =
    pytest>=7.0.0
    pytest-cov>=4.0.0
    ansible-core>=2.16.0
setenv =
    GLOBUS_CLIENT_ID = {env:GLOBUS_CLIENT_ID:}
    GLOBUS_CLIENT_SECRET = {env:GLOBUS_CLIENT_SECRET:}
    GLOBUS_SDK_ENVIRONMENT = {env:GLOBUS_SDK_ENVIRONMENT:sandbox}
commands =
    pytest tests/e2e/ -v -m e2e {posargs}

[testenv:clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv:report]
deps = coverage
skip_install = true
commands =
    coverage report
    coverage html

# Special environment for pre-commit hooks
[testenv:pre-commit]
deps = pre-commit
commands = pre-commit run --all-files

# Development environment with all tools
[testenv:dev]
deps =
    {[testenv]deps}
    {[testenv:lint]deps}
    {[testenv:security]deps}
    {[testenv:type-check]deps}
    {[testenv:docs]deps}
    pre-commit>=3.0.0
commands =
    python -c "print('Development environment ready!')"
    python -c "print('Available commands:')"
    python -c "print('  tox -e lint     # Run linting')"
    python -c "print('  tox -e format   # Format code')"
    python -c "print('  tox -e test     # Run tests')"
    python -c "print('  tox -e e2e      # Run E2E tests')"
    python -c "print('  tox -e security # Security checks')"

# Infrastructure management environments
[testenv:infra-check]
description = Check AWS account and credentials
skip_install = true
changedir = infra
deps =
    ansible-core>=2.16.0
    boto3
    botocore
passenv =
    AWS_*
    GITHUB_*
    ENVIRONMENT
commands =
    ansible-galaxy collection install -r requirements.yml
    ansible-playbook setup-token-storage.yml --check -v

[testenv:infra-deploy]
description = Deploy AWS infrastructure for token storage
skip_install = true
changedir = infra
deps =
    ansible-core>=2.16.0
    boto3
    botocore
passenv =
    AWS_*
    GITHUB_*
    ENVIRONMENT
    SKIP_CONFIRM
    CI
commands =
    ansible-galaxy collection install -r requirements.yml
    ansible-playbook setup-token-storage.yml \
        -e github_org={env:GITHUB_ORG} \
        -e github_repo={env:GITHUB_REPO:ansible-globus} \
        -e aws_region={env:AWS_REGION:us-east-1} \
        -e environment={env:ENVIRONMENT:ci}

[testenv:infra-destroy]
description = Destroy AWS infrastructure
skip_install = true
changedir = infra
deps =
    ansible-core>=2.16.0
    boto3
    botocore
passenv =
    AWS_*
    GITHUB_*
    ENVIRONMENT
    SKIP_CONFIRM
    CI
commands =
    ansible-galaxy collection install -r requirements.yml
    ansible-playbook setup-token-storage.yml \
        -e github_org={env:GITHUB_ORG} \
        -e github_repo={env:GITHUB_REPO:ansible-globus} \
        -e aws_region={env:AWS_REGION:us-east-1} \
        -e environment={env:ENVIRONMENT:ci} \
        -e state=absent
