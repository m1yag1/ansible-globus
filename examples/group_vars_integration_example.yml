---
# Enhanced group_vars/all.yml for Traditional GCS + New Collection Integration
# This extends your existing group_vars with variables needed for the new collection

# ========================================
# Your Existing Variables (from your group_vars/all.yml)
# ========================================

# GCS endpoint configuration
gcs_endpoint_name: "Test GCS Endpoint for Collection Roles"
gcs_endpoint_description: "Test endpoint for testing collection role show command"

# Test environment storage root
gcs_storage_root: "/gcs-storage"

# Test users for this environment
globus_users:
  - username: "testuser1"
    uid: 1001
    home: "/home/testuser1"
  - username: "testuser2"
    uid: 1002
    home: "/home/testuser2"
  - username: "mike.a"
    uid: 1003
    home: "/home/mike.a"

# Test collections configuration
gcs_collections:
  - id: "test-collection-1"
    display_name: "Test Collection 1"
    base_path: "/test-data"
    description: "Collection for testing role show command"
    delete_protected: false
  - id: "test-collection-2"
    display_name: "Test Collection 2"
    base_path: "/test-data-2"
    description: "Second collection for additional testing"
    delete_protected: false

# Test environment specific settings
gcs_allowed_domains: "globus.org"
gcs_test_local_user: "testuser1"

# Extended timeouts for testing
gcs_auth_timeout_mins: 20160 # 2 weeks in minutes
gcs_session_timeout_mins: 2880 # 2 days in minutes

# Endpoint ownership for testing
endpoint_owner: "mike.a@globus.org"

# ========================================
# Authentication Variables (your existing approach)
# ========================================

# Globus Auth Configuration (pulled from environment)
globus_client_id: "{{ lookup('env', 'GLOBUS_CLIENT_ID') | default('') }}"
globus_client_secret: "{{ lookup('env', 'GLOBUS_CLIENT_SECRET') | default('') }}"
globus_project_id: "{{ lookup('env', 'GLOBUS_PROJECT_ID') | default('') }}"

# ========================================
# New Collection Integration Variables
# ========================================

# Auth configuration for new collection modules
# This reuses your existing environment variable approach
globus_auth:
  client_id: "{{ globus_client_id }}"
  client_secret: "{{ globus_client_secret }}"
  # Note: Individual modules will request only the scopes they need:
  # - globus_endpoint: transfer scope
  # - globus_collection: transfer scope
  # - globus_group: groups scope
  # - globus_compute: compute scope
  # - globus_flow: flows scope

# Optional: Override default API behavior for testing
globus_api_config:
  # Set to true for more verbose API logging during development
  debug_mode: false
  # Timeout for API requests (seconds)
  timeout: 30
  # Retry configuration for transient failures
  max_retries: 3
  backoff_factor: 1.0

# ========================================
# Environment-specific Overrides
# ========================================

# Environment detection (your existing approach)
# gcs_environment is determined dynamically by run-ansible-env.sh
# gcs_high_assurance comes from EC2 tags via dynamic inventory
# gcs_subscription_id loaded from environment-specific credentials

# For the new collection, we can derive the environment from your existing vars
globus_environment: "{{ gcs_environment | default('sandbox') }}"

# ========================================
# Testing and Development Variables
# ========================================

# Enable additional validation during development
validate_api_responses: true

# Test data paths (used by both traditional role and new collection)
test_data_paths:
  - path: "/test-data"
    owner: "testuser1"
    group: "testuser1"
    mode: "0755"
  - path: "/test-data-2"
    owner: "testuser2"
    group: "testuser2"
    mode: "0755"

# Collection access configuration for testing
test_collection_permissions:
  - collection_id: "test-collection-1"
    principal: "testuser1@globusid.org"
    role: "owner"
  - collection_id: "test-collection-2"
    principal: "testuser2@globusid.org"
    role: "administrator"
